"""
Guassian Naive Bayes Model

Jonathan Yu
1007925337
yujona10
"""

import numpy as np
import pandas as pd
import re

"""
Weights and Vocab
(order): 'Dubai', 'New York City', 'Paris', 'Rio de Janeiro'
"""
PI = [0.255, 0.25333333333333335, 0.24583333333333332, 0.24583333333333332]
MEAN = [[0.0, 0.013071895424836602, 0.016339869281045753, 0.12745098039215685, 0.4411764705882353, 0.4019607843137255, 0.0, 0.06209150326797386, 0.14705882352941177, 0.2973856209150327, 0.31699346405228757, 0.17647058823529413, 0.0, 0.03594771241830065, 0.06535947712418301, 0.1437908496732026, 0.3333333333333333, 0.4215686274509804, 0.0, 0.16339869281045752, 0.2908496732026144, 0.26143790849673204, 0.17973856209150327, 0.10457516339869281, 0.22549019607843138, 0.03594771241830065, 0.28431372549019607, 0.13398692810457516, 0.238562091503268, 0.06209150326797386, 0.0196078431372549, 0.14052287581699346, 0.0032679738562091504, 0.26143790849673204, 0.2908496732026144, 0.17973856209150327, 0.08496732026143791, 0.0392156862745098, 0.11437908496732026, 0.013071895424836602, 0.23529411764705882, 0.2777777777777778, 0.16013071895424835, 0.16666666666666666, 0.032679738562091505, 0.22875816993464052, 0.026143790849673203, 0.12091503267973856, 0.1111111111111111, 0.13725490196078433, 0.30718954248366015, 0.06862745098039216, 0.23202614379084968, 0.13725490196078433, 0.0457516339869281, 0.026143790849673203, 0.03594771241830065, 0.09477124183006536, 0.42810457516339867, 0.03594771241830065, 0.7843137254901961, 0.016339869281045753, 0.00980392156862745, 0.00980392156862745, 0.0196078431372549, 0.12418300653594772, 0.5359477124183006, 0.7712418300653595, 0.34967320261437906, 0.24836601307189543, 0.17647058823529413, 0.0032679738562091504, 0.0, 0.0, 0.0, 0.12418300653594772, 0.07516339869281045, 0.06535947712418301, 0.016339869281045753, 0.0032679738562091504, 0.0, 0.013071895424836602, 54.98039215686274], [0.006578947368421052, 0.003289473684210526, 0.013157894736842105, 0.019736842105263157, 0.10197368421052631, 0.8552631578947368, 0.006578947368421052, 0.013157894736842105, 0.046052631578947366, 0.05263157894736842, 0.23026315789473684, 0.6513157894736842, 0.006578947368421052, 0.05263157894736842, 0.17763157894736842, 0.2565789473684211, 0.2993421052631579, 0.20723684210526316, 0.006578947368421052, 0.08552631578947369, 0.22697368421052633, 0.25, 0.21052631578947367, 0.22039473684210525, 0.2730263157894737, 0.029605263157894735, 0.23355263157894737, 0.023026315789473683, 0.34210526315789475, 0.05263157894736842, 0.046052631578947366, 0.20394736842105263, 0.039473684210526314, 0.22697368421052633, 0.17763157894736842, 0.20394736842105263, 0.12171052631578948, 0.02631578947368421, 0.16447368421052633, 0.019736842105263157, 0.20723684210526316, 0.22039473684210525, 0.10855263157894737, 0.2532894736842105, 0.02631578947368421, 0.13486842105263158, 0.0756578947368421, 0.19078947368421054, 0.23026315789473684, 0.08552631578947369, 0.22039473684210525, 0.0625, 0.17763157894736842, 0.2598684210526316, 0.06907894736842106, 0.125, 0.049342105263157895, 0.0756578947368421, 0.24342105263157895, 0.049342105263157895, 0.569078947368421, 0.013157894736842105, 0.03289473684210526, 0.023026315789473683, 0.029605263157894735, 0.28289473684210525, 0.6414473684210527, 0.7828947368421053, 0.5592105263157895, 0.5822368421052632, 0.0, 0.20394736842105263, 0.0, 0.0, 0.0, 0.009868421052631578, 0.01644736842105263, 0.0, 0.21052631578947367, 0.006578947368421052, 0.0, 0.003289473684210526, 3.1529605263157894], [0.006779661016949152, 0.003389830508474576, 0.010169491525423728, 0.03389830508474576, 0.2, 0.7457627118644068, 0.006779661016949152, 0.04745762711864407, 0.18305084745762712, 0.3288135593220339, 0.24067796610169492, 0.19322033898305085, 0.006779661016949152, 0.023728813559322035, 0.030508474576271188, 0.1423728813559322, 0.33220338983050846, 0.46440677966101696, 0.006779661016949152, 0.08135593220338982, 0.2711864406779661, 0.288135593220339, 0.22033898305084745, 0.13220338983050847, 0.2576271186440678, 0.29491525423728815, 0.16610169491525423, 0.02711864406779661, 0.15593220338983052, 0.020338983050847456, 0.07796610169491526, 0.18305084745762712, 0.26101694915254237, 0.19661016949152543, 0.02711864406779661, 0.15593220338983052, 0.04406779661016949, 0.13220338983050847, 0.19322033898305085, 0.13559322033898305, 0.2, 0.05084745762711865, 0.14915254237288136, 0.05423728813559322, 0.21694915254237288, 0.13898305084745763, 0.13220338983050847, 0.1694915254237288, 0.04406779661016949, 0.21694915254237288, 0.09152542372881356, 0.20677966101694914, 0.13898305084745763, 0.08135593220338982, 0.09491525423728814, 0.23728813559322035, 0.06779661016949153, 0.29152542372881357, 0.08813559322033898, 0.09491525423728814, 0.08813559322033898, 0.05423728813559322, 0.5288135593220339, 0.013559322033898305, 0.2135593220338983, 0.006779661016949152, 0.864406779661017, 0.4847457627118644, 0.3254237288135593, 0.1152542372881356, 0.0, 0.0, 0.0, 0.0, 0.15593220338983052, 0.003389830508474576, 0.0, 0.0, 0.0, 0.288135593220339, 0.0576271186440678, 0.061016949152542375, 6.932203389830509], [0.003389830508474576, 0.020338983050847456, 0.07796610169491526, 0.37966101694915255, 0.3898305084745763, 0.1288135593220339, 0.006779661016949152, 0.0711864406779661, 0.3254237288135593, 0.3152542372881356, 0.2271186440677966, 0.05423728813559322, 0.006779661016949152, 0.04745762711864407, 0.2305084745762712, 0.39661016949152544, 0.23389830508474577, 0.0847457627118644, 0.003389830508474576, 0.006779661016949152, 0.020338983050847456, 0.11864406779661017, 0.22033898305084745, 0.6305084745762712, 0.21016949152542372, 0.576271186440678, 0.01694915254237288, 0.003389830508474576, 0.020338983050847456, 0.03389830508474576, 0.13898305084745763, 0.13220338983050847, 0.23728813559322035, 0.04745762711864407, 0.03389830508474576, 0.05084745762711865, 0.0711864406779661, 0.4271186440677966, 0.15593220338983052, 0.08813559322033898, 0.03728813559322034, 0.1016949152542373, 0.0576271186440678, 0.43389830508474575, 0.12542372881355932, 0.1694915254237288, 0.04745762711864407, 0.12542372881355932, 0.3050847457627119, 0.14576271186440679, 0.16610169491525423, 0.04067796610169491, 0.16610169491525423, 0.010169491525423728, 0.2576271186440678, 0.2847457627118644, 0.18305084745762712, 0.06779661016949153, 0.030508474576271188, 0.0847457627118644, 0.03728813559322034, 0.49491525423728816, 0.09152542372881356, 0.2576271186440678, 0.023728813559322035, 0.010169491525423728, 0.5694915254237288, 0.8271186440677966, 0.30847457627118646, 0.08135593220338982, 0.0, 0.0, 0.11186440677966102, 0.04745762711864407, 0.0, 0.003389830508474576, 0.0, 0.0, 0.006779661016949152, 0.020338983050847456, 0.0, 0.0, 27.735593220338984]]
VARIANCE = [[8.396011750677081e-05, 0.012984981092345586, 0.016156838070430887, 0.11129118810674139, 0.24662375250505061, 0.24047227230512627, 8.396011750677081e-05, 0.058320108607403595, 0.12551648606906346, 0.20903137350551967, 0.21659256791792428, 0.1454126798406897, 8.396011750677081e-05, 0.034739434507698404, 0.06117157599174334, 0.12319900134096749, 0.22230618233972965, 0.24393247991758352, 8.396011750677081e-05, 0.1367835201157979, 0.20634010091805294, 0.19317208861509338, 0.14751657150628866, 0.0937231587163361, 0.1747283276684497, 0.03473943450769841, 0.2035633911055898, 0.11611839131918117, 0.18173418011836145, 0.0583201086074038, 0.019307335742266316, 0.12086015730662225, 0.0033412543205910464, 0.19317208861509336, 0.20634010091805297, 0.14751657150628866, 0.07783183486653457, 0.037761776342036035, 0.101380470006866, 0.012984981092345561, 0.18001475596525707, 0.20070124406812356, 0.13457283191895106, 0.138972849006396, 0.031695733367111685, 0.17651182974030058, 0.02554425316718865, 0.10637854766930321, 0.0988493922162717, 0.11849995396602708, 0.21290808758984547, 0.06400168406983239, 0.1782739725059055, 0.11849995396602701, 0.04374238209196095, 0.02554425316718867, 0.03473943450769843, 0.08587361366955894, 0.2449150080050722, 0.03473943450769843, 0.16924966561539181, 0.01615683807043088, 0.009791764808010368, 0.009791764808010384, 0.019307335742266465, 0.10884554754114747, 0.24879172208939815, 0.17651182974030058, 0.2274858141052898, 0.18676429674017403, 0.14541267984068962, 0.0033412543205910486, 8.396011750677081e-05, 8.396011750677081e-05, 8.396011750677081e-05, 0.10884554754114747, 0.06959782230726236, 0.06117157599174346, 0.016156838070430887, 0.003341254320591038, 8.396011750677081e-05, 0.012984981092345565, 324327.1042746561], [0.006619624937451339, 0.003362613164598177, 0.01306872466044299, 0.01943125928648187, 0.09165901205656461, 0.12387204876016644, 0.006619624937451339, 0.013068724660443034, 0.044015746821107885, 0.049945455962382604, 0.17732599612858796, 0.22718749197346205, 0.006619624937451339, 0.04994545596238235, 0.14616256122553972, 0.19083015125324115, 0.20982036939728568, 0.16437369349700856, 0.006619624937451339, 0.07829552521445998, 0.1755405910039332, 0.18758396011750678, 0.1662889462670918, 0.1719048569319105, 0.19856690679340575, 0.028812751668753276, 0.17908975997900273, 0.02258006468814389, 0.22515321219506845, 0.049945455962382285, 0.044015746821107885, 0.16243679945268616, 0.0379994725828808, 0.1755405910039331, 0.14616256122553997, 0.1624367994526865, 0.10698103421723011, 0.02570722881556778, 0.13750605153024859, 0.019431259286481865, 0.1643736934970085, 0.1719048569319105, 0.09685291787373991, 0.189217876322493, 0.025707228815567845, 0.1167628901729085, 0.07001773781833759, 0.15447281053301903, 0.1773259961285882, 0.07829552521445994, 0.17190485693191052, 0.05867771011750677, 0.1461625612255397, 0.1924207849097506, 0.06439100651639929, 0.10945896011750678, 0.04699142202886443, 0.07001773781833776, 0.18425120388481864, 0.04699142202886426, 0.24531205914797677, 0.013068724660442996, 0.03189663324770061, 0.022580064688143886, 0.028812751668753182, 0.20294926482664935, 0.23007660208426517, 0.17005452798454232, 0.2465780736909127, 0.24332106191805988, 8.396011750677081e-05, 0.1624367994526864, 8.396011750677081e-05, 8.396011750677081e-05, 8.396011750677081e-05, 0.009854995436066336, 0.016260812610581536, 8.396011750677081e-05, 0.1662889462670918, 0.006619624937451345, 8.396011750677081e-05, 0.003362613164598182, 62.09264098487502], [0.0068176573309511775, 0.003462299675105156, 0.01015003308504489, 0.032833170114633936, 0.16008396011750634, 0.18968464957455894, 0.0068176573309511775, 0.04528936086441868, 0.14962719482017817, 0.22077916264551525, 0.1828360428523532, 0.15597019970383288, 0.0068176573309511775, 0.023249717083895664, 0.029661667672806907, 0.12218680412784816, 0.22192825773313365, 0.2488170827834078, 0.0068176573309511775, 0.07482110461621401, 0.19772831518788953, 0.20519743325740847, 0.17187367571647308, 0.11480961366533822, 0.1913393465007305, 0.20802420717295056, 0.13859588197904035, 0.026467183329227595, 0.13170131145332975, 0.02000926893681152, 0.07197134879891974, 0.1496271948201783, 0.19297106152514806, 0.15803857086154574, 0.026467183329227595, 0.13170131145332953, 0.042209786029600974, 0.11480961366533844, 0.15597019970383277, 0.11729165905459406, 0.16008396011750625, 0.04834595379748395, 0.1269900215940932, 0.05137956482879683, 0.16996617787102536, 0.11975072254209758, 0.11480961366533832, 0.14084810835077344, 0.04220978602960095, 0.16996617787102528, 0.08323248065758165, 0.16410579292417155, 0.11975072254209758, 0.07482110461621384, 0.08599030886786607, 0.18106643641742123, 0.06328418993652436, 0.20662231116605528, 0.08045167054554461, 0.08599030886786609, 0.08045167054554463, 0.05137956482879688, 0.24925373891670188, 0.01345942693738613, 0.1680356981238272, 0.00681765733095118, 0.11729165905459406, 0.24985126836226307, 0.2196070856561444, 0.10205465819277289, 8.396011750677081e-05, 8.396011750677081e-05, 8.396011750677081e-05, 8.396011750677081e-05, 0.13170131145332994, 0.003462299675105162, 8.396011750677081e-05, 8.396011750677081e-05, 8.396011750677081e-05, 0.20519743325740847, 0.054390193958357286, 0.057377841186165054, 48.04464012213988], [0.003462299675105151, 0.020009268936811517, 0.07197134879891978, 0.2356024892757945, 0.2379466432545355, 0.11230458637432995, 0.00681765733095114, 0.06620289145907547, 0.21960708565614437, 0.21595296327751765, 0.17561972570210935, 0.0513795648287968, 0.00681765733095114, 0.0452893608644187, 0.17745827784229815, 0.2393945030649356, 0.179273848080736, 0.07764787853175578, 0.003462299675105151, 0.006817657330951181, 0.020009268936811507, 0.10465161309078998, 0.17187367571647302, 0.233051498181281, 0.166082236474876, 0.24426666623643664, 0.016745838887974998, 0.0034622996751051617, 0.020009268936811517, 0.03283317011463398, 0.11975072254209765, 0.11480961366533829, 0.18106643641742118, 0.04528936086441867, 0.03283317011463381, 0.04834595379748395, 0.06620289145907561, 0.24477226807499158, 0.1317013114533299, 0.08045167054554461, 0.03598169065470867, 0.0914370195831778, 0.05439019395835732, 0.24571452604683727, 0.10977657718156807, 0.1408481083507735, 0.04528936086441867, 0.10977657718156819, 0.21209200378312046, 0.1245999038118473, 0.13859588197904038, 0.0391072292930309, 0.13859588197904038, 0.010150033085044837, 0.19133934650073053, 0.20374957344700892, 0.14962719482017822, 0.06328418993652436, 0.02966166767280681, 0.07764787853175577, 0.03598169065470884, 0.2500581054780356, 0.08323248065758149, 0.19133934650073064, 0.023249717083895633, 0.010150033085044828, 0.24525488801178955, 0.1430773528207533, 0.21340197218300472, 0.07482110461621387, 8.396011750677081e-05, 8.396011750677081e-05, 0.09943472139300184, 0.04528936086441867, 8.396011750677081e-05, 0.0034622996751051444, 8.396011750677081e-05, 8.396011750677081e-05, 0.00681765733095114, 0.020009268936811514, 8.396011750677081e-05, 8.396011750677081e-05, 3253.062376404817]]
VOCAB = ['dubai', 'york', 'rio', 'janeiro', 'paris', 'rich', 'money', 'habibi', 'dreams', 'love', 'eiffel', 'tower']

""" 
Helper functions from challenge_basic.py
"""

def to_numeric(s: str) -> float:
    """
    Converts string `s` to a float.
    Invalid strings and NaN values will be converted to float('nan').
    """
    if isinstance(s, str):
        s = s.replace(",", '')
        s = pd.to_numeric(s, errors="coerce")
    return float(s)

def get_number_list(s: str) -> list[int]:
    """
    Get a list of integers contained in string `s`
    """
    return [int(n) for n in re.findall("(\d+)", str(s))]

def get_number_list_clean(s: str) -> list[str]:
    """
    Return a clean list of numbers contained in `s`.
    Additional cleaning includes removing numbers that are not of interest
    and standardizing return list size.
    """
    n_list = get_number_list(s)
    n_list += [-1]*(6-len(n_list))
    return n_list

def get_number(s: str) -> int:
    """
    Get the first number contained in string `s`.
    If `s` does not contain any numbers, return -1.
    """
    n_list = get_number_list(s)
    return n_list[0] if len(n_list) >= 1 else -1

def find_area_at_rank(l: list, i: int) -> int:
    """
    Return the area at a certain rank in list `l`.
    Areas are indexed starting at 1 as ordered in the survey.
    If area is not present in `l`, return -1.
    """
    return l.index(i) + 1 if i in l else -1

def cat_in_s(s: str, cat: str) -> int:
    """
    Return if a category is present in string `s` as an binary integer.
    """
    return int(cat in s) if not pd.isna(s) else 0

"""
My Helpers
"""

def make_bow(data: list[str], vocab: list[str]) -> np.ndarray:
    """
    Returns an array of indicators for each row of data according to vocab.
    """
    bow = np.zeros([len(data), len(vocab)])
    d = {vocab[i] : i for i in range(len(vocab))}
    for i in range(len(data)):
        for word in data[i].split():
            if word.lower() in d: bow[i][d[word.lower()]] = 1
    return bow

def clean(answers: pd.DataFrame) -> list[str]:
    """
    Returns a cleaned list of strings in lowercase.
    """
    return [re.sub('\W+', ' ', str(line)).lower() for line in answers]

"""
Prediction Code
"""

def parse_data(filename: str) -> np.ndarray:
    """
    Given the name of a csv file, returns the data it contains as a vectorized array 
    of points, and an array of corresponding labels.
    """
    data = pd.read_csv(filename)

    data["Q1"] = data["Q1"].apply(get_number)
    data["Q2"] = data["Q2"].apply(get_number)
    data["Q3"] = data["Q3"].apply(get_number)
    data["Q4"] = data["Q4"].apply(get_number)

    data["Q6"] = data["Q6"].apply(get_number_list_clean)

    data["Q7"] = data["Q7"].apply(to_numeric).fillna(0)
    data["Q8"] = data["Q8"].apply(to_numeric).fillna(0)
    data["Q9"] = data["Q9"].apply(to_numeric).fillna(0)

    data["Q10"] = clean(data["Q10"])
    
    temp_names = []
    for i in range(1,7):
        col_name = f"rank_{i}"
        temp_names.append(col_name)
        data[col_name] = data["Q6"].apply(lambda l: find_area_at_rank(l, i))
    del data["Q6"]

    new_names = []
    for col in ["Q1", "Q2", "Q3", "Q4"] + temp_names:
        values = [-1, 1, 2, 3, 4, 5, 6] if col in temp_names else [-1, 1, 2, 3, 4, 5]
        indicators = pd.get_dummies(pd.Series(data[col], dtype=pd.CategoricalDtype(categories=values)), prefix=col)
        new_names.extend(indicators.columns)
        data = pd.concat([data, indicators], axis=1)
        del data[col]

    for cat in ["Partner", "Friends", "Siblings", "Co-worker"]:
      cat_name = f"Q5{cat}"
      new_names.append(cat_name)
      data[cat_name] = data["Q5"].apply(lambda s: cat_in_s(s, cat))
    del data["Q5"]

    bow = pd.DataFrame(make_bow(data["Q10"], VOCAB), columns=VOCAB)
    new_names.extend(VOCAB)  
    data = pd.concat([data, bow], axis=1)
    del data["Q10"]

    return data[new_names + ["Q7"]].values

def predict(x) -> str:
    """
    Makes a prediction for a single example data point.
    Returns one of 'Dubai', 'Rio de Janeiro', 'New York City', or 'Paris'.
    """
    pi = np.array(PI)
    mean = np.array(MEAN)
    var = np.array(VARIANCE)

    p = []
    for c in range(4):
        prob = 1
        for i in range(len(x)):
            prob *= (np.exp(-((x[i] - mean[c][i]) ** 2) / (2 * var[c][i])) / np.sqrt(2 * np.pi * var[c][i]))
        p.append(prob * pi[c])

    if max(p) == p[0]: return 'Dubai'
    if max(p) == p[1]: return 'New York City'
    if max(p) == p[2]: return 'Paris'
    return 'Rio de Janeiro'

def predict_all(filename: str) -> list[str]:
    """
    Returns a list of predictions given a CSV file containing example data.
    """
    return [predict(example) for example in parse_data(filename)]
