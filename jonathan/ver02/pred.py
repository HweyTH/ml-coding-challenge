import numpy as np
import pandas as pd
import sys, csv, random, re

"""
Weights
(order): 'Dubai', 'New York City', 'Paris', 'Rio de Janeiro'
"""
PI = [0.24916667, 0.25166667, 0.25333333, 0.24583333]
MEAN = [[0.0, 0.013377926421404682, 0.016722408026755852, 0.12040133779264214, 0.41471571906354515, 0.43478260869565216, 0.0, 0.06020066889632107, 0.1605351170568562, 0.2809364548494983, 0.3177257525083612, 0.1806020066889632, 0.0, 0.033444816053511704, 0.056856187290969896, 0.14046822742474915, 0.3612040133779264, 0.4080267558528428, 0.0, 0.16722408026755853, 0.28762541806020064, 0.25752508361204013, 0.17725752508361203, 0.11036789297658862, 0.2140468227424749, 0.05016722408026756, 0.2709030100334448, 0.12709030100334448, 0.2508361204013378, 0.06688963210702341, 0.020066889632107024, 0.15384615384615385, 0.0033444816053511705, 0.26421404682274247, 0.29431438127090304, 0.14046822742474915, 0.09698996655518395, 0.046822742474916385, 0.10367892976588629, 0.010033444816053512, 0.2508361204013378, 0.27424749163879597, 0.18729096989966554, 0.14715719063545152, 0.026755852842809364, 0.22742474916387959, 0.030100334448160536, 0.10367892976588629, 0.11036789297658862, 0.12709030100334448, 0.33444816053511706, 0.06688963210702341, 0.22408026755852842, 0.14046822742474915, 0.056856187290969896, 0.026755852842809364, 0.043478260869565216, 0.08695652173913043, 0.4214046822742475, 0.04013377926421405, 0.7658862876254181, 0.020066889632107024, 0.016722408026755852, 0.010033444816053512, 0.016722408026755852, 0.13043478260869565, 0.5351170568561873, 0.7759197324414716, 0.3612040133779264, 0.24414715719063546, 55.79598662207358], [0.0033112582781456954, 0.0033112582781456954, 0.013245033112582781, 0.019867549668874173, 0.09271523178807947, 0.8675496688741722, 0.0033112582781456954, 0.009933774834437087, 0.046357615894039736, 0.06622516556291391, 0.23841059602649006, 0.6357615894039735, 0.0033112582781456954, 0.056291390728476824, 0.15894039735099338, 0.271523178807947, 0.2947019867549669, 0.2152317880794702, 0.0033112582781456954, 0.076158940397351, 0.2152317880794702, 0.25165562913907286, 0.2251655629139073, 0.22847682119205298, 0.2781456953642384, 0.04304635761589404, 0.2251655629139073, 0.019867549668874173, 0.3344370860927152, 0.052980132450331126, 0.046357615894039736, 0.2119205298013245, 0.033112582781456956, 0.23178807947019867, 0.16887417218543047, 0.2052980132450331, 0.1291390728476821, 0.019867549668874173, 0.17549668874172186, 0.026490066225165563, 0.2185430463576159, 0.20860927152317882, 0.11258278145695365, 0.23509933774834438, 0.023178807947019868, 0.15894039735099338, 0.07947019867549669, 0.16887417218543047, 0.22847682119205298, 0.08609271523178808, 0.22185430463576158, 0.056291390728476824, 0.18874172185430463, 0.2251655629139073, 0.08278145695364239, 0.1291390728476821, 0.04966887417218543, 0.0695364238410596, 0.25496688741721857, 0.052980132450331126, 0.5894039735099338, 0.009933774834437087, 0.039735099337748346, 0.013245033112582781, 0.03642384105960265, 0.2582781456953642, 0.6291390728476821, 0.7880794701986755, 0.543046357615894, 0.5860927152317881, 3.051324503311258], [0.006578947368421052, 0.003289473684210526, 0.01644736842105263, 0.03289473684210526, 0.19078947368421054, 0.75, 0.006578947368421052, 0.049342105263157895, 0.18092105263157895, 0.3355263157894737, 0.23684210526315788, 0.19078947368421054, 0.006578947368421052, 0.01644736842105263, 0.03289473684210526, 0.12828947368421054, 0.3256578947368421, 0.4901315789473684, 0.006578947368421052, 0.08223684210526316, 0.26973684210526316, 0.29605263157894735, 0.22039473684210525, 0.125, 0.21710526315789475, 0.3157894736842105, 0.18092105263157895, 0.029605263157894735, 0.15460526315789475, 0.019736842105263157, 0.08223684210526316, 0.18421052631578946, 0.2598684210526316, 0.17105263157894737, 0.023026315789473683, 0.16776315789473684, 0.04276315789473684, 0.1513157894736842, 0.18421052631578946, 0.12828947368421054, 0.22039473684210525, 0.046052631578947366, 0.16776315789473684, 0.046052631578947366, 0.20723684210526316, 0.14802631578947367, 0.12828947368421054, 0.16776315789473684, 0.05921052631578947, 0.1875, 0.08552631578947369, 0.2236842105263158, 0.1513157894736842, 0.08552631578947369, 0.10526315789473684, 0.22697368421052633, 0.06578947368421052, 0.29276315789473684, 0.07236842105263158, 0.09868421052631579, 0.0756578947368421, 0.049342105263157895, 0.5328947368421053, 0.013157894736842105, 0.2236842105263158, 0.006578947368421052, 0.8717105263157895, 0.4868421052631579, 0.32894736842105265, 0.1118421052631579, 6.881578947368421], [0.006779661016949152, 0.01694915254237288, 0.061016949152542375, 0.3898305084745763, 0.376271186440678, 0.14915254237288136, 0.010169491525423728, 0.061016949152542375, 0.3389830508474576, 0.3220338983050847, 0.21694915254237288, 0.05084745762711865, 0.010169491525423728, 0.04067796610169491, 0.23728813559322035, 0.3898305084745763, 0.22033898305084745, 0.1016949152542373, 0.006779661016949152, 0.010169491525423728, 0.01694915254237288, 0.08813559322033898, 0.23728813559322035, 0.6406779661016949, 0.18305084745762712, 0.6033898305084746, 0.010169491525423728, 0.013559322033898305, 0.023728813559322035, 0.03389830508474576, 0.13220338983050847, 0.14576271186440679, 0.22372881355932203, 0.04406779661016949, 0.01694915254237288, 0.04406779661016949, 0.07796610169491526, 0.44745762711864406, 0.1423728813559322, 0.08813559322033898, 0.05084745762711865, 0.09830508474576272, 0.0576271186440678, 0.43050847457627117, 0.13220338983050847, 0.14915254237288136, 0.03389830508474576, 0.1423728813559322, 0.3016949152542373, 0.14915254237288136, 0.1864406779661017, 0.03728813559322034, 0.1694915254237288, 0.010169491525423728, 0.23389830508474577, 0.3288135593220339, 0.1694915254237288, 0.061016949152542375, 0.02711864406779661, 0.07457627118644068, 0.03389830508474576, 0.5050847457627119, 0.06779661016949153, 0.28135593220338984, 0.02711864406779661, 0.010169491525423728, 0.5864406779661017, 0.8406779661016949, 0.31864406779661014, 0.0847457627118644, 27.589830508474577]]
VARIANCE = [[8.396138044427083e-05, 0.01328291888651239, 0.016526730476986905, 0.10598881703082795, 0.242810552805596, 0.24583065325189948, 8.396138044427083e-05, 0.05666050974120071, 0.13484755462884204, 0.2020951245665373, 0.21686006008180161, 0.14806888324932788, 8.396138044427083e-05, 0.032410221713102726, 0.05370752263814868, 0.1208208658893429, 0.23081963547804937, 0.2416248837414919, 8.396138044427083e-05, 0.1393441486266714, 0.20498099832634034, 0.19128987630309666, 0.14592125626528887, 0.09827078255694163, 0.16831474179677203, 0.04773443508879185, 0.1975985305687083, 0.11102231777466794, 0.18800132248378687, 0.062499370604054895, 0.019748170953043816, 0.13026147617334405, 0.003417257428586921, 0.1944889456647376, 0.2077773876284725, 0.12082086588934293, 0.0876668743232521, 0.04471433464248852, 0.09301357066893055, 0.010016736181620918, 0.18800132248378681, 0.19911976634906947, 0.15229702387415173, 0.1255859132601779, 0.026123938561907423, 0.17578669401206964, 0.029278265694713663, 0.09301357066893057, 0.09827078255694167, 0.11102231777466796, 0.22267654983023855, 0.06249937060405493, 0.17395226262987076, 0.120820865889343, 0.0537075226381488, 0.026123938561907322, 0.041671863081767235, 0.07947904644660682, 0.2439067374120321, 0.03860702040662967, 0.17938844343321753, 0.01974817095304393, 0.016526730476986683, 0.010016736181620954, 0.01652673047698677, 0.1135055114749622, 0.2488507536982033, 0.17395226262987062, 0.23081963547804937, 0.18462328420681176, 331882.3965895932], [0.0033842552272053813, 0.0033842552272053844, 0.013153563590873687, 0.019556791519473364, 0.08420307896300615, 0.11499120229093025, 0.0033842552272053813, 0.009919056332420111, 0.04429254872310461, 0.0619233543895227, 0.18165494510922903, 0.23165275222295176, 0.0033842552272053813, 0.05320663143877521, 0.13376230882134488, 0.19788230355841824, 0.2079366871380867, 0.1689910268600287, 0.0033842552272053813, 0.07044271757534766, 0.1689910268600286, 0.18840903484213412, 0.17454999357201428, 0.17635912475047133, 0.2008646288950279, 0.04127733009234259, 0.17454999357201417, 0.01955679151947329, 0.22267288291897402, 0.050257199396321034, 0.04429254872310461, 0.16709418023049416, 0.032100101023442476, 0.17814632706615977, 0.1404396475345601, 0.16323470038312018, 0.11254613409216718, 0.019556791519473222, 0.144781562362857, 0.02587230399699609, 0.17086594462679291, 0.16517540473819264, 0.09999186015681392, 0.17991160051907798, 0.022725512189619282, 0.13376230882134515, 0.0732386475784181, 0.1404396475345604, 0.17635912475047136, 0.07876472099625087, 0.17271893353078815, 0.05320663143877509, 0.15320224566622045, 0.17454999357201414, 0.07601264871871874, 0.11254613409216739, 0.04728583849109712, 0.06478507098090057, 0.19004273511843897, 0.05025719939632093, 0.24209089090107966, 0.009919056332420082, 0.038240182598811796, 0.013153563590873723, 0.03518110624251186, 0.19165450653197308, 0.23340706124448501, 0.16709418023049416, 0.2482309724764479, 0.24267200576446232, 64.7333769090583], [0.006619626200388834, 0.003362614427535681, 0.01626081387351908, 0.03189663451063828, 0.15447281179595654, 0.18758396138044428, 0.006619626200388834, 0.04699142329180187, 0.14827258672670415, 0.2230323685826596, 0.1808318838181168, 0.15447281179595657, 0.006619626200388834, 0.016260813873519037, 0.031896634510638275, 0.11191524600648248, 0.21968879171285524, 0.24998657564637214, 0.006619626200388834, 0.07555790528626168, 0.1970628394967878, 0.20848943229457234, 0.171904858194848, 0.10945896138044427, 0.17005452924747985, 0.21615044337490474, 0.14827258672670404, 0.02881275293169076, 0.13078643714221735, 0.01943126054941937, 0.07555790528626168, 0.1503609696906933, 0.1924207861726881, 0.14187759018930807, 0.02258006595108139, 0.13970264212836714, 0.04101843160205107, 0.12850328271008424, 0.15036096969069326, 0.11191524600648237, 0.17190485819484805, 0.04401574808404539, 0.13970264212836686, 0.04401574808404539, 0.16437369475994604, 0.12619848700371283, 0.11191524600648246, 0.13970264212836664, 0.055788601269641074, 0.15242771138044428, 0.07829552647739774, 0.17373354586797854, 0.12850328271008463, 0.0782955264773977, 0.09426678686520855, 0.17554059226687085, 0.06154518021700978, 0.20713685265468096, 0.06721519406742504, 0.08902959849955766, 0.07001773908127529, 0.04699142329180184, 0.24900189766853198, 0.013068725923380427, 0.17373354586797857, 0.006619626200388831, 0.11191524600648246, 0.24991083118653934, 0.22082495861036153, 0.09941741013390669, 42.93507357356885], [0.006817658593888679, 0.016745840150912586, 0.05737784244910279, 0.23794664451747302, 0.23477514207564626, 0.12699002285703084, 0.01015003434798233, 0.05737784244910286, 0.22415750346605107, 0.2184120280279598, 0.16996617913396322, 0.048345955060421365, 0.010150034347982333, 0.039107230555968334, 0.18106643768035868, 0.23794664451747294, 0.17187367697941058, 0.0914370208461152, 0.006817658593888679, 0.010150034347982421, 0.016745840150912676, 0.08045167180848209, 0.1810664376803587, 0.2302936712339331, 0.14962719608311592, 0.2393945043278731, 0.01015003434798232, 0.013459428200323633, 0.023249718346833047, 0.032833171377571385, 0.11480961492827595, 0.12459990507478476, 0.1737581929231054, 0.042209787292538464, 0.01674584015091249, 0.04220978729253846, 0.07197135006185727, 0.24732326043244104, 0.12218680539078566, 0.08045167180848213, 0.04834595506042147, 0.08872515643933604, 0.05439019522129484, 0.24525488927472716, 0.11480961492827585, 0.12699002285703076, 0.03283317137757131, 0.12218680539078566, 0.2107590547444208, 0.12699002285703068, 0.15176451294608595, 0.03598169191764622, 0.14084810961371091, 0.01015003434798235, 0.17927384934367352, 0.22077916390845276, 0.14084810961371086, 0.05737784244910282, 0.026467184592165093, 0.06909861234281135, 0.03283317137757139, 0.2500581067409731, 0.06328419119946185, 0.20227873299779647, 0.026467184592165113, 0.010150034347982355, 0.24261197057320505, 0.1340224847932564, 0.21719398723508274, 0.07764787979469327, 3258.6148957970595]]

""" 
Helper functions from challenge_basic.py
"""

def to_numeric(s: str) -> float:
    """
    Converts string `s` to a float.
    Invalid strings and NaN values will be converted to float('nan').
    """
    if isinstance(s, str):
        s = s.replace(",", '')
        s = pd.to_numeric(s, errors="coerce")
    return float(s)

def get_number_list(s):
    """Get a list of integers contained in string `s`
    """
    return [int(n) for n in re.findall("(\d+)", str(s))]

def get_number_list_clean(s):
    """Return a clean list of numbers contained in `s`.

    Additional cleaning includes removing numbers that are not of interest
    and standardizing return list size.
    """
    n_list = get_number_list(s)
    n_list += [-1]*(6-len(n_list))
    return n_list

def get_number(s):
    """Get the first number contained in string `s`.

    If `s` does not contain any numbers, return -1.
    """
    n_list = get_number_list(s)
    return n_list[0] if len(n_list) >= 1 else -1

def find_area_at_rank(l, i):
    """Return the area at a certain rank in list `l`.

    Areas are indexed starting at 1 as ordered in the survey.

    If area is not present in `l`, return -1.
    """
    return l.index(i) + 1 if i in l else -1

def cat_in_s(s, cat):
    """Return if a category is present in string `s` as an binary integer.
    """
    return int(cat in s) if not pd.isna(s) else 0

"""
MY CODE
"""

def parse_data(filename: str) -> np.ndarray:
    """
    Returns a vectorized representation of the data.
    """
    data = pd.read_csv(filename)

    data["Q1"] = data["Q1"].apply(get_number)
    data["Q2"] = data["Q2"].apply(get_number)
    data["Q3"] = data["Q3"].apply(get_number)
    data["Q4"] = data["Q4"].apply(get_number)

    data["Q6"] = data["Q6"].apply(get_number_list_clean)

    data["Q7"] = data["Q7"].apply(to_numeric).fillna(0)
    data["Q8"] = data["Q8"].apply(to_numeric).fillna(0)
    data["Q9"] = data["Q9"].apply(to_numeric).fillna(0)

    temp_names = []
    for i in range(1,7):
        col_name = f"rank_{i}"
        temp_names.append(col_name)
        data[col_name] = data["Q6"].apply(lambda l: find_area_at_rank(l, i))
    del data["Q6"]

    new_names = []
    for col in ["Q1", "Q2", "Q3", "Q4"] + temp_names:
        values = [-1, 1, 2, 3, 4, 5, 6] if col in temp_names else [-1, 1, 2, 3, 4, 5]
        indicators = pd.get_dummies(pd.Series(data[col], dtype=pd.CategoricalDtype(categories=values)), prefix=col)
        new_names.extend(indicators.columns)
        data = pd.concat([data, indicators], axis=1)
        del data[col]

    for cat in ["Partner", "Friends", "Siblings", "Co-worker"]:
      cat_name = f"Q5{cat}"
      new_names.append(cat_name)
      data[cat_name] = data["Q5"].apply(lambda s: cat_in_s(s, cat))
    del data["Q5"]

    data = data[new_names + ["Q7"]]
    return data.values

def predict(x) -> str:
    """
    Makes a prediction for a single example data point.
    Returns one of 'Dubai', 'Rio de Janeiro', 'New York City', or 'Paris'.
    """
    pi = np.array(PI)
    mean = np.array(MEAN)
    var = np.array(VARIANCE)

    p = []
    for c in range(4):
        prob = 1
        for i in range(len(x)):
            prob *= (np.exp(-((x[i] - mean[c][i]) ** 2) / (2 * var[c][i])) / np.sqrt(2 * np.pi * var[c][i]))
        p.append(prob * pi[c])

    if max(p) == p[0]: return 'Dubai'
    if max(p) == p[1]: return 'New York City'
    if max(p) == p[2]: return 'Paris'
    return 'Rio de Janeiro'

def predict_all(filename: str) -> list[str]:
    """
    Returns a list of predictions given a CSV file containing example data.
    """
    return [predict(example) for example in parse_data(filename)]

print(predict_all('/Users/jonathanyu/Documents/University of Toronto/Year 3/Term 2/CSC311/challenge/ver02/test.csv'))
